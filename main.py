import os
import asyncio
import logging
from fastapi import FastAPI
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
CHANNEL_ID = -100246645098
DOWNLOAD_LINK = 'https://disk.yandex.ru/i/5qJyHoKiMonmPw'
WEBHOOK_URL = f"https://blondinkaizakon-lid-f051.twc1.net/{BOT_TOKEN}"
PORT = int(os.environ.get("PORT", 8000))

SUCCESS_MESSAGE = (
    "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã!\n\n"
    "–û—Ç–∫—Ä–æ–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ:\n"
    f"{DOWNLOAD_LINK}\n\n"
    "üëâ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä."
)

logging.basicConfig(level=logging.INFO)
app_fastapi = FastAPI()
app_telegram = Application.builder().token(BOT_TOKEN).build()

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=reply_markup
    )

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ===
async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user

    try:
        member = await app_telegram.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user.id)
        if member.status in ['member', 'administrator', 'creator']:
            await query.edit_message_text(SUCCESS_MESSAGE)
        else:
            keyboard = [[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=reply_markup
            )
    except Exception as e:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")

# === Telegram handlers ===
app_telegram.add_handler(CommandHandler("start", start))
app_telegram.add_handler(CallbackQueryHandler(check_subscription, pattern="check_subscription"))

# === FastAPI ===
@app_fastapi.get("/")
def read_root():
    return {"status": "ok"}

@app_fastapi.post(f"/{BOT_TOKEN}")
async def webhook(update: dict):
    await app_telegram.initialize()
    await app_telegram.process_update(Update.de_json(update, app_telegram.bot))
    return {"ok": True}

# === –ó–∞–ø—É—Å–∫ ===
async def run_bot():
    await app_telegram.initialize()
    await app_telegram.start()
    await app_telegram.bot.set_webhook(url=WEBHOOK_URL)

if __name__ == '__main__':
    asyncio.run(run_bot())
    import uvicorn
    uvicorn.run(app_fastapi, host="0.0.0.0", port=PORT)
